#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Client pour le Model Context Protocol (MCP).

Ce script permet de :
1. Interroger un serveur MCP pour r√©cup√©rer les outils disponibles
2. Ex√©cuter un outil MCP sp√©cifique
"""

import os
import sys
import json
import asyncio
import logging
import argparse
from typing import Dict, List, Any, Optional
import aiohttp

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('mcp_client')

class MCPClient:
    """Client pour interagir avec un serveur Model Context Protocol."""

    def __init__(self, mcp_url: str, headers: Dict = None):
        """
        Initialise le client MCP.
        
        Args:
            mcp_url: URL du serveur MCP
            headers: En-t√™tes HTTP optionnels pour les requ√™tes
        """
        self.mcp_url = mcp_url.rstrip('/')
        self.headers = headers or {}
        
    async def get_schema(self) -> Dict:
        """
        R√©cup√®re le sch√©ma du serveur MCP.
        
        Returns:
            Sch√©ma des outils disponibles
        """
        try:
            logger.info(f"R√©cup√©ration du sch√©ma MCP depuis {self.mcp_url}/schema")
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.mcp_url}/schema", headers=self.headers) as response:
                    if response.status == 200:
                        schema = await response.json()
                        logger.info(f"Sch√©ma r√©cup√©r√© avec succ√®s")
                        return schema
                    else:
                        error_text = await response.text()
                        logger.error(f"Erreur lors de la r√©cup√©ration du sch√©ma: {response.status} - {error_text}")
                        return {"error": f"Erreur {response.status}", "message": error_text}
        except Exception as e:
            logger.exception(f"Exception lors de la r√©cup√©ration du sch√©ma: {str(e)}")
            return {"error": str(e)}
            
    def list_tools(self, schema: Dict) -> List[Dict]:
        """
        Extrait la liste des outils d'un sch√©ma MCP.
        
        Args:
            schema: Sch√©ma MCP complet
            
        Returns:
            Liste des outils disponibles
        """
        tools = []
        
        if "tools" in schema:
            tools = schema["tools"]
        elif "functions" in schema:
            # Format alternatif utilis√© par certains serveurs MCP
            tools = schema["functions"]
            
        return tools
        
    async def run_tool(self, tool_id: str, parameters: Dict[str, Any]) -> Dict:
        """
        Ex√©cute un outil sp√©cifique.
        
        Args:
            tool_id: Identifiant de l'outil √† ex√©cuter
            parameters: Param√®tres √† passer √† l'outil
            
        Returns:
            R√©sultat de l'ex√©cution
        """
        try:
            logger.info(f"Ex√©cution de l'outil {tool_id} avec param√®tres: {parameters}")
            
            async with aiohttp.ClientSession() as session:
                # Format du payload selon le protocole MCP
                payload = {
                    "name": tool_id,
                    "parameters": parameters
                }
                
                async with session.post(
                    f"{self.mcp_url}/run",
                    headers=self.headers,
                    json=payload
                ) as response:
                    if response.status >= 200 and response.status < 300:
                        result = await response.json()
                        logger.info(f"Outil ex√©cut√© avec succ√®s")
                        return result
                    else:
                        error_text = await response.text()
                        logger.error(f"Erreur lors de l'ex√©cution de l'outil: {response.status} - {error_text}")
                        return {"error": f"Erreur {response.status}", "message": error_text}
        except Exception as e:
            logger.exception(f"Exception lors de l'ex√©cution de l'outil: {str(e)}")
            return {"error": str(e)}

def format_tools_output(tools: List[Dict]) -> str:
    """
    Formate la liste des outils pour l'affichage.
    
    Args:
        tools: Liste des outils
        
    Returns:
        Texte format√© pour l'affichage
    """
    if not tools:
        return "Aucun outil disponible."
        
    output = "üõ†Ô∏è Outils disponibles :\n\n"
    
    for i, tool in enumerate(tools, 1):
        tool_id = tool.get("name", "inconnu")
        description = tool.get("description", "Pas de description disponible")
        
        output += f"{i}. **{tool_id}** - {description}\n"
        
        parameters = tool.get("parameters", {})
        if isinstance(parameters, dict) and "properties" in parameters:
            properties = parameters["properties"]
            required = parameters.get("required", [])
            
            if properties:
                output += "   Param√®tres:\n"
                for param_name, param_info in properties.items():
                    param_desc = param_info.get("description", "")
                    param_type = param_info.get("type", "")
                    req_mark = "*" if param_name in required else ""
                    
                    output += f"   - {param_name}{req_mark}: {param_type} - {param_desc}\n"
        
        output += "\n"
    
    return output

async def main():
    """Point d'entr√©e principal du script."""
    parser = argparse.ArgumentParser(description="Client Model Context Protocol (MCP)")
    parser.add_argument("--url", required=True, help="URL du serveur MCP")
    parser.add_argument("--token", help="Token d'authentification (optionnel)")
    parser.add_argument("--action", choices=["list", "run"], default="list", 
                      help="Action √† effectuer: lister les outils ou ex√©cuter un outil")
    parser.add_argument("--tool", help="ID de l'outil √† ex√©cuter (requis pour run)")
    parser.add_argument("--params", help="Param√®tres JSON pour l'outil (requis pour run)")
    parser.add_argument("--output", choices=["text", "json"], default="text",
                      help="Format de sortie: texte ou JSON")
    
    args = parser.parse_args()
    
    # Pr√©parer les headers d'authentification si un token est fourni
    headers = {}
    if args.token:
        headers["Authorization"] = f"Bearer {args.token}"
    
    # Cr√©er le client MCP
    client = MCPClient(args.url, headers)
    
    if args.action == "list":
        # Lister les outils disponibles
        schema = await client.get_schema()
        
        if "error" in schema:
            print(f"Erreur: {schema.get('error')}")
            sys.exit(1)
            
        tools = client.list_tools(schema)
        
        if args.output == "json":
            print(json.dumps(tools, indent=2))
        else:
            print(format_tools_output(tools))
            
    elif args.action == "run":
        # V√©rifier que les param√®tres requis sont pr√©sents
        if not args.tool:
            print("Erreur: L'ID de l'outil est requis pour l'action 'run'")
            sys.exit(1)
            
        # Pr√©parer les param√®tres
        try:
            params = json.loads(args.params) if args.params else {}
        except json.JSONDecodeError:
            print("Erreur: Les param√®tres doivent √™tre au format JSON valide")
            sys.exit(1)
            
        # Ex√©cuter l'outil
        result = await client.run_tool(args.tool, params)
        
        if args.output == "json":
            print(json.dumps(result, indent=2))
        else:
            if "error" in result:
                print(f"Erreur: {result.get('error')}")
                print(f"Message: {result.get('message', 'Pas de d√©tails disponibles')}")
            else:
                print("‚úÖ R√©sultat:")
                print(json.dumps(result, indent=2))

if __name__ == "__main__":
    asyncio.run(main()) 