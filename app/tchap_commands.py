# SPDX-FileCopyrightText: 2024 Etalab <etalab@modernisation.gouv.fr>
#
# SPDX-License-Identifier: MIT

"""
Module qui impl√©mente des commandes Tchap dans le bot.
Ce module fournit des fonctions pour envoyer des messages avec diff√©rents effets et formattages
compatibles avec les commandes natives de Tchap.
"""

from matrix_bot.client import MatrixClient
from matrix_bot.config import logger
from matrix_bot.eventparser import EventParser
from nio import RoomMessageText

from config import COMMAND_PREFIX
from webhook_commands import register_feature, only_allowed_user


# ================================================================================
# Commandes de formatage de message
# ================================================================================

@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="spoiler",
    help="Envoie le message flout√©",
)
@only_allowed_user
async def spoiler_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec effet de floutage (spoiler)"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !spoiler <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    html_content = f'<span data-mx-spoiler>{message}</span>'
    
    await matrix_client.send_html_message(ep.room.room_id, html_content)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="shrug",
    help="Ajoute ¬Ø\\_(„ÉÑ)_/¬Ø en pr√©fixe du message",
)
@only_allowed_user
async def shrug_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec un shrug en pr√©fixe"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    message = " ".join(parts) if parts else ""
    
    formatted_message = f"¬Ø\\_(„ÉÑ)_/¬Ø {message}"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="tableflip",
    help="Ajoute (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª en pr√©fixe du message",
)
@only_allowed_user
async def tableflip_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec tableflip en pr√©fixe"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    message = " ".join(parts) if parts else ""
    
    formatted_message = f"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª {message}"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="unflip",
    help="Ajoute ‚î¨‚îÄ‚îÄ‚î¨ „Éé( „Çú-„Çú„Éé) en pr√©fixe du message",
)
@only_allowed_user
async def unflip_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec unflip en pr√©fixe"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    message = " ".join(parts) if parts else ""
    
    formatted_message = f"‚î¨‚îÄ‚îÄ‚î¨ „Éé( „Çú-„Çú„Éé) {message}"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="lenny",
    help="Ajoute ( Õ°¬∞ Õú ñ Õ°¬∞) en pr√©fixe du message",
)
@only_allowed_user
async def lenny_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec lenny en pr√©fixe"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    message = " ".join(parts) if parts else ""
    
    formatted_message = f"( Õ°¬∞ Õú ñ Õ°¬∞) {message}"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="plain",
    help="Envoie un message en texte brut, sans l'interpr√©ter en format markdown",
)
@only_allowed_user
async def plain_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message en texte brut"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !plain <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    await matrix_client.send_text_message(ep.room.room_id, message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="html",
    help="Envoie un message en HTML, sans l'interpr√©ter comme du Markdown",
)
@only_allowed_user
async def html_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message en HTML"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !html <message HTML>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    await matrix_client.send_html_message(ep.room.room_id, message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="me",
    help="Affiche l'action",
)
@only_allowed_user
async def me_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message d'action (emote)"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !me <action>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    # En Matrix, m.emote est un type sp√©cial pour les actions
    await matrix_client.send_text_message(ep.room.room_id, message, msgtype="m.emote")


# ================================================================================
# Commandes d'effets visuels
# ================================================================================

@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="rainbow",
    help="Envoie le message color√© aux couleurs de l'arc-en-ciel",
)
@only_allowed_user
async def rainbow_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message aux couleurs de l'arc-en-ciel"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !rainbow <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    text = " ".join(parts)
    # Impl√©mentation simplifi√©e - on utilise un effet CSS pour l'arc-en-ciel
    rainbow_html = f'<span style="background-image: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet); -webkit-background-clip: text; color: transparent;">{text}</span>'
    
    await matrix_client.send_html_message(ep.room.room_id, rainbow_html)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="rainbowme",
    help="Envoie la r√©action color√©e aux couleurs de l'arc-en-ciel",
)
@only_allowed_user
async def rainbowme_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie une action (emote) aux couleurs de l'arc-en-ciel"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !rainbowme <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    text = " ".join(parts)
    # Impl√©mentation simplifi√©e - on combine les effets arc-en-ciel et emote
    rainbow_html = f'<span style="background-image: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet); -webkit-background-clip: text; color: transparent;">{text}</span>'
    
    await matrix_client.send_html_message(ep.room.room_id, rainbow_html, msgtype="m.emote")


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="confetti",
    help="Envoie le message avec des confettis",
)
@only_allowed_user
async def confetti_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec effet de confettis"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !confetti <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    
    # Les effets sp√©ciaux comme confettis n√©cessitent normalement du JavaScript c√¥t√© client
    # Pour simuler, nous ajoutons simplement des √©mojis confettis au message
    formatted_message = f"üéä {message} üéä"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="fireworks",
    help="Envoie le message donn√© avec des feux d'artifices",
)
@only_allowed_user
async def fireworks_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec effet de feux d'artifice"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !fireworks <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    
    # Simulation avec des √©mojis
    formatted_message = f"üéÜ {message} üéÜ"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="hearts",
    help="Envoie le message donn√© avec des c≈ìurs",
)
@only_allowed_user
async def hearts_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec effet de c≈ìurs"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !hearts <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    
    # Simulation avec des √©mojis
    formatted_message = f"‚ù§Ô∏è {message} ‚ù§Ô∏è"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="rainfall",
    help="Envoie le message avec de la pluie",
)
@only_allowed_user
async def rainfall_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec effet de pluie"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !rainfall <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    
    # Simulation avec des √©mojis
    formatted_message = f"üåßÔ∏è {message} üåßÔ∏è"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="snowfall",
    help="Envoie le message donn√© avec une chute de neige",
)
@only_allowed_user
async def snowfall_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec effet de neige"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !snowfall <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    
    # Simulation avec des √©mojis
    formatted_message = f"‚ùÑÔ∏è {message} ‚ùÑÔ∏è"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message)


@register_feature(
    group="tchap",
    onEvent=RoomMessageText,
    command="spaceinvaders",
    help="Envoyer le message avec un effet li√© au th√®me de l'espace",
)
@only_allowed_user
async def spaceinvaders_message(ep: EventParser, matrix_client: MatrixClient):
    """Envoie un message avec effet space invaders"""
    parts = ep.command[1:] if ep.command and len(ep.command) > 1 else []
    if not parts:
        message = "Utilisation: !spaceinvaders <message>"
        await matrix_client.send_markdown_message(ep.room.room_id, message)
        return
    
    message = " ".join(parts)
    
    # Simulation avec des √©mojis et caract√®res
    formatted_message = f"üëæ {message} üëæ"
    await matrix_client.send_text_message(ep.room.room_id, formatted_message) 